// @strict-types

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции, предназначенные для использования другими 
// объектами конфигурации или другими программами
///////////////////////////////////////////////////////////////////////////////// 
#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
    ЮТТесты
		.ЗависитОт().ФайлыПроекта("tests/fixtures/schema.json")
		.ДобавитьТест("Ошибка_НетОбязательногоСвойства")
		.ДобавитьТест("Ошибка_НеЗаполненоОбязательноеСвойство")
		.ДобавитьТест("Ошбика_ОжиданиеОбъекта")
		.ДобавитьТест("Ошбика_ОжиданиеМассива")
		.ДобавитьТест("Ошибка_НекорректныйТип")
		.ДобавитьТест("Ошибка_РазличныйКвалификатор")
        .ДобавитьТест("Ошибка_НекорректныйФормат_ПриРазбореТипа")
		.ДобавитьТест("Ошибка_НекорректныйФормат_Дата")
		.ДобавитьТест("Ошибка_НекорректныйФормат_ДатаВремя")
		.ДобавитьТест("Ошибка_НекорректныйФормат_Base64")
		.ДобавитьТест("Ошибка_НекорректныйФормат_РегулярноеВыражение")
			.СПараметрами("pattern")
			.СПараметрами("uri")
			.СПараметрами("email")
			.СПараметрами("uuid")
			.СПараметрами("ipv4")
			.СПараметрами("ipv6")
		.ДобавитьТест("РазрешениеСсылочногоТипа")
		.ДобавитьТест("УспешнаяВалидацияОбъекта")
		.ДобавитьТест("УспешнаяВалидацияМассива")
		.ДобавитьТест("УспешнаяВалидацияСтроки")
		.ДобавитьТест("УспешнаяВалидацияЧисла")
		.ДобавитьТест("УспешнаяВложенногоСложногоОбъекта")
		
КонецПроцедуры

#Область События

Процедура ПередВсемиТестами() Экспорт
 	ПолноеИмяФайла = ЮТест.Зависимость(ЮТЗависимости.ФайлыПроекта("tests/fixtures/schema.json")).ПолноеИмя; // Получаем результат работы зависимости

    ЮТест.ОжидаетЧто(ЮТФайлы.Существует(ПолноеИмяФайла), "Схема не найдена!")
        .ЭтоИстина();
	ЮТест.КонтекстМодуля().Вставить("Схема", ЮТОбщий.ДанныеТекстовогоФайла(ПолноеИмяФайла));
КонецПроцедуры

Процедура ПередКаждымТестом() Экспорт
	
КонецПроцедуры

Процедура ПослеКаждогоТеста() Экспорт
	
КонецПроцедуры

Процедура ПослеВсехТестов() Экспорт
	
КонецПроцедуры

#КонецОбласти

Процедура Ошибка_НетОбязательногоСвойства() Экспорт
	ОбъектПроверки = Новый Структура("test", "hello world!");
	ИмяСхемы = "object";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			.ИмеетДлинуБольше(0)
			.Содержит(ЮТест.Предикат() // Значение по условиям
    		.СодержитСтрокуПоШаблону("Отсутствует обязательное свойство"))
	
КонецПроцедуры
		
Процедура Ошибка_НеЗаполненоОбязательноеСвойство() Экспорт
	ОбъектПроверки = Новый Структура("required");
	ИмяСхемы = "object";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			.ИмеетДлинуБольше(0)
			.Содержит(ЮТест.Предикат() // Значение по условиям
    		.СодержитСтрокуПоШаблону("Не заполнено обязательное свойство"))
	
КонецПроцедуры
		
Процедура Ошбика_ОжиданиеОбъекта() Экспорт
	ОбъектПроверки = Новый Структура("nested_object", "Не объект");
	ИмяСхемы = "object";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			.ИмеетДлинуБольше(0)
			.Содержит(ЮТест.Предикат() // Значение по условиям
    		.СодержитСтрокуПоШаблону("Модель данных должна быть в формате объекта"))
	
КонецПроцедуры

Процедура Ошбика_ОжиданиеМассива() Экспорт
	ОбъектПроверки = Новый Структура("nested_array", "Не Массив");
	ИмяСхемы = "object";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			.ИмеетДлинуБольше(0)
			.Содержит(ЮТест.Предикат() // Значение по условиям
    		.СодержитСтрокуПоШаблону("Модель данных должна быть в формате массива"))
	
КонецПроцедуры
		
Процедура Ошибка_НекорректныйТип() Экспорт
	ОбъектПроверки = "Привет";
	ИмяСхемы = "simple_number";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			.ИмеетДлинуБольше(0)
			.Содержит(ЮТест.Предикат() // Значение по условиям
    		.СодержитСтрокуПоШаблону("Некорректный тип .* Ожидается тип "".*"", передан тип "".*"""))
	
КонецПроцедуры
 
Процедура Ошибка_РазличныйКвалификатор() Экспорт
	ОбъектПроверки = Новый Соответствие;
	ОбъектПроверки.Вставить("date", Дата("20241231010000"));
	
	ИмяСхемы = "strings";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			.ИмеетДлинуБольше(0)
			.Содержит(ЮТест.Предикат() // Значение по условиям
    		.СодержитСтрокуПоШаблону("Ожидается тип "".*"""))
	
КонецПроцедуры

Процедура Ошибка_НекорректныйФормат_ПриРазбореТипа() Экспорт
	ОбъектПроверки = Новый Соответствие;
	ОбъектПроверки.Вставить("date", Дата("20241231010000"));
	
	ИмяСхемы = "strings";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			.ИмеетДлинуБольше(0)
			.Содержит(ЮТест.Предикат() // Значение по условиям
    		.СодержитСтрокуПоШаблону("Ожидается формат "".*"""))
	
КонецПроцедуры

Процедура Ошибка_НекорректныйФормат_Дата() Экспорт
	ОбъектПроверки = Новый Соответствие;
	ОбъектПроверки.Вставить("date", ЗаписатьДатуJSON(Дата("20241231010000"),ФорматДатыJSON.ISO));
	
	ИмяСхемы = "strings";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			.ИмеетДлинуБольше(0)
			.Содержит(ЮТест.Предикат() // Значение по условиям
    		.СодержитСтрокуПоШаблону("Ожидался формат date"))
	
КонецПроцедуры
		
Процедура Ошибка_НекорректныйФормат_ДатаВремя() Экспорт
	ОбъектПроверки = Новый Соответствие;
	ОбъектПроверки.Вставить("date-time", "не дата и время");
	
	ИмяСхемы = "strings";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			.ИмеетДлинуБольше(0)
			.Содержит(ЮТест.Предикат() // Значение по условиям
    		.СодержитСтрокуПоШаблону("Ожидался формат date-time"))
	
КонецПроцедуры
		
Процедура Ошибка_НекорректныйФормат_Base64() Экспорт
	ОбъектПроверки = Новый Соответствие;
	ОбъектПроверки.Вставить("base64", "не base64");
	
	ИмяСхемы = "strings";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			.ИмеетДлинуБольше(0)
			.Содержит(ЮТест.Предикат() // Значение по условиям
    		.СодержитСтрокуПоШаблону("Ожидалось Base64 значение."))
	
КонецПроцедуры

Процедура Ошибка_НекорректныйФормат_РегулярноеВыражение(ИдентификаторФормата) Экспорт
	ОбъектПроверки = Новый Соответствие;
	ОбъектПроверки.Вставить(ИдентификаторФормата, "не корректное значение");
	
	ИмяСхемы = "strings";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			.ИмеетДлинуБольше(0)
			.Содержит(ЮТест.Предикат() // Значение по условиям
    		.СодержитСтрокуПоШаблону("Ожидался "+ИдентификаторФормата))
	
КонецПроцедуры

Процедура РазрешениеСсылочногоТипа() Экспорт
	ОбъектПроверки = Новый Структура("ref", 123);
	ИмяСхемы = "object";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			.ИмеетДлинуБольше(0)
			.Содержит(ЮТест.Предикат() // Значение по условиям
			// если все разрешится корректно, тип должен быть ограничен строкой. Потому возникнет проблема несоответствия типа
    		.СодержитСтрокуПоШаблону("Некорректный тип .* Ожидается тип "".*"", передан тип "".*"""))
	
КонецПроцедуры

Процедура УспешнаяВалидацияОбъекта() Экспорт
	ОбъектПроверки = Новый Структура("required", "Требуемое");
	ИмяСхемы = "object";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			 .ИмеетДлину(0)
КонецПроцедуры
		
Процедура УспешнаяВалидацияМассива() Экспорт
	ОбъектПроверки = ЮТКоллекции.ЗначениеВМассиве("Раз","Два", "Три");
	ИмяСхемы = "array";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			 .ИмеетДлину(0)
КонецПроцедуры

Процедура УспешнаяВалидацияСтроки() Экспорт
	ОбъектПроверки = "Привет, Мир!";
	ИмяСхемы = "simple_string";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			 .ИмеетДлину(0)
КонецПроцедуры

Процедура УспешнаяВалидацияЧисла() Экспорт
	ОбъектПроверки = 42;
	ИмяСхемы = "simple_number";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			 .ИмеетДлину(0)
КонецПроцедуры

Процедура УспешнаяВложенногоСложногоОбъекта() Экспорт
	ОбъектПроверки = Новый Структура("required, nested_object", "Требуемое", Новый Структура("required", "Требуемое"));
	ИмяСхемы = "object";
	МассивОшибок = Валидировать(ОбъектПроверки, ИмяСхемы);
	
	ЮТест.ОжидаетЧто(МассивОшибок)
			 .ИмеетДлину(0)
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Валидировать(МодельДанных, ИмяСхемы)
	Возврат  инт_ВалидаторПакетов.Валидировать(МодельДанных, ИмяСхемы, ЮТест.КонтекстМодуля().Схема);
КонецФункции

#КонецОбласти
