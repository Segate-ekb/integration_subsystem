// Экспортер метрик из базы данных системы 1С:Предприятие 8 в Prometheus
//
// Copyright 2023-2024 Andrei Chernyak
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// URL: https://github.com/ChernyakAI/1c_prometheus_exporter
//

#Область ПрограммныйИнтерфейс

// Отправить метрики в prometheus pushgateway
//
Процедура ВыполнитьОтправкуМетрик() Экспорт
	
	ОтправитьМетрики();
	
КонецПроцедуры

// Формирование тела сообщения для экспорта prometheus
//   См. пэ_Метрики.ПодготовитьТелоСообщения()
//
Функция ТелоСообщения() Экспорт
	
	Возврат ПодготовитьТелоСообщения();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получает настройки, установленные в константах подсистемы экспорта
//
// Возвращаемое значение:
//  Структура:
//    * АдресШлюза  - Строка - URL установленной службы prometheus pushgateway
//    * ИмяЗадачи   - Строка - соответствует выгружаемой метке exported_job
//    * ИмяИнстанса - Строка - Соответствует выгружаемой метке exported_instance
//
Функция НастройкиОтправкиВШлюз() Экспорт
	
	НастройкиОтправки = Новый Структура();
	НастройкиОтправки.Вставить("АдресШлюза",  Константы.пэ_АдресШлюза.Получить());
	НастройкиОтправки.Вставить("ИмяЗадачи",   Константы.пэ_ИмяЗадачи.Получить());
	НастройкиОтправки.Вставить("ИмяИнстанса", Константы.пэ_ИмяИнстанса.Получить());
	
	Возврат НастройкиОтправки;
	
КонецФункции

// Создает структуру, соответствующую строке отправляемой метрики
//
// Параметры:
//   НастройкиОтправки - см. пэ_Метрики.НастройкиОтправкиВШлюз()
//
// Возвращаемое значение:
//   Структура:
//     * Инстанс            - Строка - см. пэ_Метрики.НастройкиОтправкиВШлюз()
//     * Задача             - Строка - см. пэ_Метрики.НастройкиОтправкиВШлюз()
//     * Метрика            - Строка - наименование метрики, например onec_apdex_total_value
//     * ТипМетрики         - Строка - тип из семейства метрик OpenMetrics
//     * Описание           - Строка - описание метрики
//     * ЗначениеПоказателя - Число  - значение отправляемого показателя
//     * Профиль            - Строка - наименование профила ключевых операций
//     * КлючеваяОперация   - Строка - наименование ключевой операции
//
Функция СтруктураПараметровЗаписи(НастройкиОтправки) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Инстанс",            НастройкиОтправки.ИмяИнстанса);
	ПараметрыЗаписи.Вставить("Задача",             НастройкиОтправки.ИмяЗадачи);
	ПараметрыЗаписи.Вставить("Метрика",            "");
	ПараметрыЗаписи.Вставить("ТипМетрики",         "counter");
	ПараметрыЗаписи.Вставить("Описание",           "");
	ПараметрыЗаписи.Вставить("ЗначениеПоказателя", 0);
	ПараметрыЗаписи.Вставить("Профиль",            "");
	ПараметрыЗаписи.Вставить("КлючеваяОперация",   "");
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтправитьМетрики()
	
	НастройкиОтправки = НастройкиОтправкиВШлюз();
	ТелоСообщения = ПодготовитьТелоСообщения(НастройкиОтправки);
	
	Если ТелоСообщения <> "" Тогда
		
		Маршрут = СтрШаблон("metrics/job/%1/instance/%2", НастройкиОтправки.ИмяЗадачи, НастройкиОтправки.ИмяИнстанса);
		URL = СтрШаблон("%1%2", НастройкиОтправки.АдресШлюза, Маршрут);
		Ответ = пэ_Коннектор.Put(URL, ТелоСообщения);
		
		Если Ответ.КодСостояния <> 200 Тогда
			
			ТелоОтвета = ПолучитьСтрокуИзДвоичныхДанных(Ответ.Тело);
			
			ИмяСобытия = "PrometheusExporter.пэ_Метрики.ОтправитьМетрики()";
			ТекстОшибки = "Ошибка отправки метрик в prometheus pushgetway. " + URL + " - " + ТелоОтвета;
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			
			ИмяСобытия = "PrometheusExporter.пэ_Метрики.ОтправитьМетрики()";
			ТекстОшибки = ТелоСообщения;
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует тело сообщения для отправки в prometheus
//
// Параметры:
//   НастройкиОтправки - см. пэ_Метрики.НастройкиОтправкиВШлюз()
//
// Возвращаемое значение:
//   Строка - сформированное сообщение
//
Функция ПодготовитьТелоСообщения(НастройкиОтправки = Неопределено)
	
	ЗапросЗамеров = ВыбратьЗамеры();
	Если ЗапросЗамеров.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Если НастройкиОтправки = Неопределено Тогда
		НастройкиОтправки = НастройкиОтправкиВШлюз();
	КонецЕсли;
	
	ГруппаМетрикАпдекс = Новый Массив;
	ГруппаМетрикКоличествоЗамеров = Новый Массив;
	ГруппаМетрикСреднее = Новый Массив;
	ГруппаМетрикМинимум = Новый Массив;
	ГруппаМетрикМаксимум = Новый Массив;
	
	ГруппаМетрикАпдексОбщий = Новый Массив;
	
	Итоги = ЗапросЗамеров.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Итоги.Следующий() Цикл
		
		ЭлементВыгрузки = ДобавитьМетрику(
			"onec_apdex_total_value",
			"Общее значение APDEX",
			Формат((Итоги.N_T + Итоги.N_T_4T / 2) / Итоги.КоличествоЗамеров, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧН=0"),
			Итоги,
			НастройкиОтправки
		);
		ДобавитьСтрокуВСообщение(ГруппаМетрикАпдексОбщий, ЭлементВыгрузки);
		
		Детали = Итоги.Выбрать();
		Пока Детали.Следующий() Цикл
			
			Апдекс = Формат((Детали.N_T + Детали.N_T_4T / 2) / Детали.КоличествоЗамеров, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧН=0");
			ЭлементВыгрузки = ДобавитьМетрику("onec_apdex_value", "Значение APDEX", Апдекс, Детали, НастройкиОтправки);
			ДобавитьСтрокуВСообщение(ГруппаМетрикАпдекс, ЭлементВыгрузки);
			
			ЭлементВыгрузки = ДобавитьМетрику("onec_apdex_number_of_measurements", "Количество замеров", Формат(Детали.КоличествоЗамеров, "ЧН=0; ЧГ=0"), Детали, НастройкиОтправки);
			ДобавитьСтрокуВСообщение(ГруппаМетрикКоличествоЗамеров, ЭлементВыгрузки);
			
			Среднее = Формат(Детали.ЗамерыСумма / Детали.КоличествоЗамеров, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧН=0");
			ЭлементВыгрузки = ДобавитьМетрику("onec_apdex_average_duration_of_the_operation", "Среднее", Среднее, Детали, НастройкиОтправки);
			ДобавитьСтрокуВСообщение(ГруппаМетрикСреднее, ЭлементВыгрузки);
			
			ЭлементВыгрузки = ДобавитьМетрику("onec_apdex_minimum_duration_of_the_operation", "МинимальноеЗначение", Формат(Детали.МинимальноеЗначение, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧН=0"), Детали, НастройкиОтправки);
			ДобавитьСтрокуВСообщение(ГруппаМетрикМинимум, ЭлементВыгрузки);
			
			ЭлементВыгрузки = ДобавитьМетрику("onec_apdex_maximum_duration_of_the_operation", "Максимум", Формат(Детали.МаксимальноеЗначение, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧН=0"), Детали, НастройкиОтправки);
			ДобавитьСтрокуВСообщение(ГруппаМетрикМаксимум, ЭлементВыгрузки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	СоставСообщения = Новый Массив;
	ИТКВ_БСПКлиентСервер.ДополнитьМассив(СоставСообщения, ГруппаМетрикАпдексОбщий);
	ИТКВ_БСПКлиентСервер.ДополнитьМассив(СоставСообщения, ГруппаМетрикАпдекс);
	ИТКВ_БСПКлиентСервер.ДополнитьМассив(СоставСообщения, ГруппаМетрикКоличествоЗамеров);
	ИТКВ_БСПКлиентСервер.ДополнитьМассив(СоставСообщения, ГруппаМетрикСреднее);
	ИТКВ_БСПКлиентСервер.ДополнитьМассив(СоставСообщения, ГруппаМетрикМинимум);
	ИТКВ_БСПКлиентСервер.ДополнитьМассив(СоставСообщения, ГруппаМетрикМаксимум);
	СоставСообщения.Добавить("");
	
	Возврат СтрСоединить(СоставСообщения, Символы.ПС);
	
КонецФункции

Функция ВыбратьЗамеры()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнтервалСбораСекунд = РегистрыСведений.пэ_ИнтервалыСбораПоказателей.ТекущийИнтервал();
	Если ИнтервалСбораСекунд = 0 Тогда
		ИмяСобытия = "PrometheusExporter.пэ_Метрики.ВыбратьЗамеры()";
		ТекстОшибки = "Не установлен интервал сбора показателей";
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	НачалоПериода = УниверсальноеВремя(ТекущаяДатаСеанса() - ИнтервалСбораСекунд);
	КонецПериода = УниверсальноеВремя(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериодаЧисло", (НачалоПериода - Дата(1, 1, 1)) * 1000);
	Запрос.УстановитьПараметр("КонецПериодаЧисло",  (КонецПериода - Дата(1, 1, 1)) * 1000);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	пэ_ПрофилиКлючевыхОпераций.Профиль КАК Профиль
	|ПОМЕСТИТЬ ПрофилиДляЭкспорта
	|ИЗ
	|	РегистрСведений.пэ_ПрофилиКлючевыхОпераций КАК пэ_ПрофилиКлючевыхОпераций
	|ГДЕ
	|	пэ_ПрофилиКлючевыхОпераций.ЭкспортРазрешен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ПрофилиДляЭкспорта.Профиль) КАК Профиль,
	|	ПРЕДСТАВЛЕНИЕ(КлючевыеОперации.КлючеваяОперация) КАК КлючеваяОперация,
	|	КлючевыеОперации.Приоритет КАК Приоритет,
	|	КлючевыеОперации.ЦелевоеВремя КАК ЦелевоеВремя,
	|	КОЛИЧЕСТВО(*) КАК КоличествоЗамеров,
	|	СУММА(Замеры.ВремяВыполнения) КАК ЗамерыСумма,
	|	СУММА(ВЫБОР
	|			КОГДА Замеры.ВремяВыполнения <= КлючевыеОперации.ЦелевоеВремя
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК N_T,
	|	СУММА(ВЫБОР
	|			КОГДА Замеры.ВремяВыполнения > КлючевыеОперации.ЦелевоеВремя
	|					И Замеры.ВремяВыполнения <= 4 * КлючевыеОперации.ЦелевоеВремя
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК N_T_4T,
	|	СУММА(ВЫБОР
	|			КОГДА Замеры.ВремяВыполнения > 4 * КлючевыеОперации.ЦелевоеВремя
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК N_4T,
	|	МИНИМУМ(Замеры.ВремяВыполнения) КАК МинимальноеЗначение,
	|	МАКСИМУМ(Замеры.ВремяВыполнения) КАК МаксимальноеЗначение
	|ИЗ
	|	ПрофилиДляЭкспорта КАК ПрофилиДляЭкспорта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиКлючевыхОпераций.КлючевыеОперацииПрофиля КАК КлючевыеОперации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗамерыВремени КАК Замеры
	|			ПО (КлючевыеОперации.КлючеваяОперация = Замеры.КлючеваяОперация)
	|		ПО (ПрофилиДляЭкспорта.Профиль = КлючевыеОперации.Ссылка)
	|ГДЕ
	|	Замеры.ДатаНачалаЗамера МЕЖДУ &НачалоПериодаЧисло И &КонецПериодаЧисло
	|
	|СГРУППИРОВАТЬ ПО
	|	КлючевыеОперации.Приоритет,
	|	КлючевыеОперации.ЦелевоеВремя,
	|	ПРЕДСТАВЛЕНИЕ(ПрофилиДляЭкспорта.Профиль),
	|	ПРЕДСТАВЛЕНИЕ(КлючевыеОперации.КлючеваяОперация)
	|ИТОГИ
	|	СУММА(КоличествоЗамеров),
	|	СУММА(N_T),
	|	СУММА(N_T_4T)
	|ПО
	|	Профиль";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ДобавитьМетрику(Знач Метрика, Знач Описание, Знач Значение, Знач Выборка, Знач НастройкиОтправки);
	
	ПараметрыЗаписи = СтруктураПараметровЗаписи(НастройкиОтправки);
	ПараметрыЗаписи.Вставить("Профиль",            Выборка.Профиль);
	ПараметрыЗаписи.Вставить("КлючеваяОперация",   ?(Выборка.КлючеваяОперация = NULL, "Все", Выборка.КлючеваяОперация));
	ПараметрыЗаписи.Вставить("Метрика",            Метрика);
	ПараметрыЗаписи.Вставить("Описание",           Описание);
	ПараметрыЗаписи.Вставить("ЗначениеПоказателя", Значение);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

Процедура ДобавитьСтрокуВСообщение(СоставСообщения, Знач ПараметрыЗаписи)
	
	СтрокаTYPE = СтрШаблон("# TYPE %1 %2", ПараметрыЗаписи.Метрика, ПараметрыЗаписи.ТипМетрики);
	Если СоставСообщения.Найти(СтрокаTYPE) = Неопределено Тогда
		СоставСообщения.Добавить(СтрокаTYPE);
	КонецЕсли;
	
	СтрокаHELP = СтрШаблон("# HELP %1 %2.", ПараметрыЗаписи.Метрика, ПараметрыЗаписи.Описание);
	Если СоставСообщения.Найти(СтрокаHELP) = Неопределено Тогда
		СоставСообщения.Добавить(СтрокаHELP);
	КонецЕсли;
	
	СтрокаMETRIC = СтрШаблон("%1{instance=""%2"", job=""%3"", profile=""%4"", keyoperation=""%5""} %6",
		ПараметрыЗаписи.Метрика,
		ПараметрыЗаписи.Инстанс,
		ПараметрыЗаписи.Задача,
		пэ_Служебный.ЭкранироватьСимволы(ПараметрыЗаписи.Профиль),
		пэ_Служебный.ЭкранироватьСимволы(ПараметрыЗаписи.КлючеваяОперация),
		ПараметрыЗаписи.ЗначениеПоказателя
	);
	
	СоставСообщения.Добавить(СтрокаMETRIC);
	
КонецПроцедуры

#КонецОбласти